#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 10 12:10:26 2019

@author: kj22643
"""

# This scirpt runs PCA on a subset of the pre-treatment data that we will use 
# to build the classifier, then uses these PCS and projects each cell's gene expression
# vector onto it, and uses knn to classify that cell as sensitive or resistant

# The goal of this script from KJ_lin_classifier is to actually work within the 
# ann data objects. This way, we can visualizes the cells in PC space as well as lit
# up in umap space


%reset

import numpy as np
import pandas as pd
import os
import scanpy as sc
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.pyplot import plot, show, draw, figure, cm
import matplotlib as plt
import random
from collections import OrderedDict
import copy
import math
import matplotlib.pyplot as plt
from pandas import DataFrame, Series
import plotnine as gg
import scipy as sp
import scipy.stats as stats
import sklearn as sk
import sklearn.model_selection as model_selection
from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import StratifiedKFold
import sklearn.feature_selection as feature_selection
import sklearn.linear_model as linear_model
import sklearn.pipeline as pipeline
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
from sklearn.neighbors import KNeighborsClassifier
from sklearn.cluster import KMeans
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn import metrics
from sklearn.metrics import roc_curve, auc
os.chdir('/Users/kj22643/Documents/Documents/231_Classifier_Project/code')
from func_file import find_mean_AUC
from func_file import find_mean_AUC_SVM



path = '/Users/kj22643/Documents/Documents/231_Classifier_Project/data'
#path = '/stor/scratch/Brock/231_10X_data/'
os.chdir(path)
sc.settings.figdir = 'KJ_plots'
sc.set_figure_params(dpi_save=300)
sc.settings.verbosity = 3

#%% Load in pre and post treatment 231 data
adata = sc.read('post-cell-cycle-regress.h5ad')
adata.obs.head()
# current samples:
#BgL1K
#30hr
#Rel-1 AA107 7 weeks
#Rel-2 AA113  10 weeks - 1 day
# We will change these to time points
# Count the number of unique lineages in all the cells
uniquelins = adata.obs['lineage'].unique()
nunique = len(uniquelins)



#%% Identify lineages that have been recalled from the pre-treatment sample
# Make a column labeled recalled lin that can be use to identify the specific lineages of interest

# These correspond to AA161 and AA170
# AA170 is the highly proliferative lineage that ultimately decreases in lineage abundance
# AA161 is a lowly abundant in the pre-treatment but is one of the ones that comes
# to  be highly abundance in both post treatment samples

reslin = ['GTACATTTTCATACCTCTCG']
senslin = ['GTGTGTTGTTTTTGTACGGC']


adata.obs.loc[adata.obs.lineage.isin(reslin)==True,'recalled_lin'] = 'res_lin'
adata.obs.loc[adata.obs.lineage.isin(reslin)==False,'recalled_lin'] = 'na'
adata.obs.loc[adata.obs.lineage.isin(senslin)==True,'recalled_lin'] = 'sens_lin'

print(adata.obs['recalled_lin'])
#%% Add a column to rename the samples by time point
samps= adata.obs['sample'].unique()

timepoint = np.array(['t=0 wks', 't=7 wks', 't=10 wks'])

adata.obs.loc[adata.obs['sample']==samps[0], 'timepoint']='t=0 wks'
adata.obs.loc[adata.obs['sample']==samps[1], 'timepoint']='t=7 wks'
adata.obs.loc[adata.obs['sample']==samps[2], 'timepoint']='t=10 wks'

print(adata.obs['timepoint'].unique())


TP = np.array(['pre', 'post'])

adata.obs.loc[adata.obs['sample']==samps[0], 'TP']='pre'
adata.obs.loc[adata.obs['sample']==samps[1], 'TP']='post'
adata.obs.loc[adata.obs['sample']==samps[2], 'TP']='post'


sc.pl.umap(adata,color='timepoint',palette=['#2c9e2f', '#d604f7', '#c91212'])
sc.pl.umap(adata,color='recalled_lin',palette=['#a00101','#f79d02','#00c6c6'])   

sc.pl.umap(adata,color='timepoint',palette=['#f79d02', '#d604f7', '#00c6c6'])
sc.pl.umap(adata,color='recalled_lin',palette=['#00c6c6','#c91212','#2c9e2f'])
  
#%%
#top = adata.obs.loc[adata.obs.lineage!='nan','lineage'].value_counts()[:9].index.tolist()
#adata.obs['topLineages'] = adata.obs.loc[adata.obs.lineage.isin(top),'lineage'].cat.set_categories(top+['other'])

linAbundpre= adata.obs.loc[adata.obs.TP=='pre','lineage'].value_counts()
linAbundpost= adata.obs.loc[adata.obs.TP=='post','lineage'].value_counts()

npre = sum(linAbundpre)
npost=sum (linAbundpost)
linproppre = linAbundpre/npre
linproppost = linAbundpost/npost
dpost = linproppost.to_dict()
dpre = linproppre.to_dict()
  
d3 = {key: dpost[key] - dpre.get(key, 0) for key in dpost.keys()}

adata.uns['linpropchange'] = d3
#%%Map the lineages in d3 to the cells in the anndata object

#df = df.rename(columns={'clustered_lineage':'lineage'})
#df.set_index('proper_cell_name',inplace=True)
adata.obs['linpropchange']= adata.obs['lineage'].map(d3)
sc.pl.umap(adata,color='linpropchange')
sc.pl.umap(adata,color='timepoint',palette=['#2c9e2f','#046df7', '#d604f7', '#c91212'])
                                            
plt.figure()
plt.hist(adata.obs.loc[adata.obs.timepoint == 't=0 wks','linpropchange'], bins = 100)
plt.xlabel(' Change in lineage abundance (% of post- % of pre)')
plt.ylabel('number of cells')                                          

#%% Make the sensitive and resistant labels within your anndata object
#adata.obs.loc[(adata.obs['sample']==samp)&(adata.obs.lineage!='nan'),'lineage'].value_counts()[:6])
classLabel = np.array(['res', 'sens', 'unknown', 'res_est', 'sens_est'])

adata.obs.loc[adata.obs.timepoint=='t=0 wks','classLabel'] = 'unknown'
adata.obs.loc[adata.obs.timepoint=='t=7 wks','classLabel'] = 'unknown'
adata.obs.loc[adata.obs.timepoint=='t=10 wks','classLabel'] = 'unknown'
adata.obs.loc[(adata.obs.linpropchange>0)&(adata.obs.timepoint=='t=0 wks'), 'classLabel'] = 'res'
adata.obs.loc[(adata.obs.linpropchange<-0.05)&(adata.obs.timepoint=='t=0 wks'), 'classLabel'] = 'sens'
adata.obs.loc[adata.obs.lineage=='nan', 'classLabel'] = 'unknown'
#adata.obs.loc[(adata.obs.linpropchange<-0.5)&(adata.obs.timepoint=='t=0hr'), 'classLabel'] = 'sens'

sc.pl.umap(adata,color='classLabel', palette = ['red', 'green', 'gray'])
#%% Now we want to take out only the data that is labeled as res and sens and perform PCA on that
adata_sr= adata[(adata.obs['classLabel']=='res')|(adata.obs['classLabel']=='sens'), :]
dfsr= pd.concat([adata_sr.obs['lineage'], adata_sr.obs['recalled_lin'],adata_sr.obs['classLabel'],
               pd.DataFrame(adata_sr.raw.X,index=adata_sr.obs.index,
                            columns=adata_sr.var_names),], axis=1) 
sc.pl.umap(adata_sr,color='classLabel',palette=['red', 'green','gray']) 
nsr= len(dfsr)

y= pd.factorize(dfsr['classLabel'])[0] 
nres = sum(y)

mu_sr = sum(y)/len(y)
print(mu_sr)
Xsr = dfsr.drop(columns= [ 'classLabel', 'lineage', 'recalled_lin'])
#%% Use Xsr and y to run principle component analysis!

#Assign the optimal parameters (foudn from KJ_classifier_optimization.py) for building your prediction model 
# p(x|Sj) where Sj is your training set and x is any new cell (in your test set or in future cells)
# Will want to redo these optimized hyperparameters with the new way of classifying cells as sensitive or resistant by cluster
n_neighbors = 73
n_components = 500

knn = KNeighborsClassifier(n_neighbors=n_neighbors)

pca=PCA(copy=True, iterated_power='auto', n_components=n_components, random_state=0,
            svd_solver='auto', tol=0.0, whiten=False)

#pca = PCA(n_components=0.90, svd_solver='full', random_state = 0)



#%% Perform PCA on the all cells from all sample 
# Already defined PCA and SVM hyperparameters above

# Start by builing model using all the data from the pre-treatment time point
pca.fit(Xsr, y)
# Compute the eigenvector space 
# These should all be ncells x ncomponents matrices

# the components is a n_components x n-total genes matrix that gives the weight of 
# each gene that goes into making the principal component.
# We can use this later to identify the directions of genes
# might be worth making into a dataframe...
components = pca.components_
compdf = pd.DataFrame(components, columns = adata_sr.var_names) # This gives the weights of each gene that make up each of the principal components
adata.uns['principal_components'] = compdf
#%% What are the top genes in the first two principal components?
PC1 = compdf.iloc[0,:]
PC2 = compdf.iloc[1,:]

topgenesPC1=PC1.iloc[(-np.abs(PC1.values)).argsort()]
topgenesPC2=PC2.iloc[(-np.abs(PC2.values)).argsort()]

# Pull out a few to plot
sc.pl.umap(adata_sr,color=['UBE2S'])
sc.pl.umap(adata_sr,color=['NEAT1'])
sc.pl.umap(adata_sr,color=['TOP2A'])
sc.pl.umap(adata_sr, color = ['IL1RAPL1'])
sc.pl.umap(adata_sr,color = ['IL18'])

sc.pl.umap(adata,color=['UBE2S'])
sc.pl.umap(adata,color=['NEAT1'])
sc.pl.umap(adata,color=['TOP2A'])
sc.pl.umap(adata, color = ['IL1RAPL1'])
sc.pl.umap(adata,color = ['IL18'])



# We can use the compdf to make the arrow plot of the gene weights in PC space 
V = pca.fit_transform(Xsr)
PCsr = pca.transform(Xsr)

knn.fit(pca.transform(Xsr), y)

#%% Look at explained variance
var_in_PCs= pca.explained_variance_ratio_
cdf_varPCs = var_in_PCs.cumsum()
print(var_in_PCs[:49])
print(cdf_varPCs[:49])
#%%
plt.figure()
plt.plot(np.linspace(1, len(var_in_PCs), len(var_in_PCs)), var_in_PCs)
plt.xlabel('PC')
plt.ylabel('Variance in each PC') 

plt.figure()
plt.plot(np.linspace(1, 49, 49), var_in_PCs[:49])
plt.xlabel('PC')
plt.ylabel('Variance in each PC') 
#%%
plt.figure()
plt.plot(np.linspace(1, len(cdf_varPCs), len(cdf_varPCs)), cdf_varPCs)
plt.xlabel('PC')
plt.ylabel('CDF of variance in each PC') 

plt.figure()
plt.plot(np.linspace(1, 49, 49), cdf_varPCs[:49])
plt.xlabel('PC')
plt.ylabel('CDF of variance in each PC') 




#%% Visualize in PC space 
PCs_sr=pca.transform(Xsr)
PCsrdf = pd.DataFrame(PCs_sr)
PCsrdf['classlabel'] = y
PCsrdf.reset_index(drop=True, inplace=True)
PCsrdfs = PCsrdf[PCsrdf['classlabel']==0]
PCsrdfr = PCsrdf[PCsrdf['classlabel']==1]
xsrs= np.asarray(PCsrdfs[0])
ysrs=np.asarray(PCsrdfs[1])
xsrr= np.asarray(PCsrdfr[0])
ysrr=np.asarray(PCsrdfr[1])

fig = plt.figure(figsize=(10,10))

srs = plt.scatter(xsrs, ysrs, c='g', marker='^', alpha = 1, label = 't=0 wks labeled sensitive')
srr = plt.scatter(xsrr, ysrr, c='r', marker='^', alpha = 1, label = 't=0 wks labeled resistant')

plt.xlabel('PC1')
plt.ylabel('PC2')

plt.legend(loc=1, prop={'size': 15})



#%% Now project the unknown cells onto this PC space
#Apply the pca and knn classifier to the pre, int, and post1&2 treatment samples. 
# Basically, apply to all the unknown samples
# make a subset of your ann data
adata_unk= adata[(adata.obs['classLabel']=='unknown'), :]
# Make a data frame with just the raw gene-cell matrix but keep the cell identity
Xunk = pd.DataFrame(adata_unk.raw.X,index=adata_unk.obs.index,
                            columns=adata_unk.var_names)
#%% Use knn to make a vector of predicted classes
thres_prob = 0.2
y_unk = knn.predict(pca.transform(Xunk))
pre_prob= knn.predict_proba(pca.transform(Xunk))



#%% Vary the threshold probability 
thres_prob = 0.2
B = pre_prob[:,1]>thres_prob
y_est=B*1
#  Try mapping outcomes

# first make an indexed data frame
class_est= pd.DataFrame(y_est, index = adata_unk.obs.index)

class_est.columns=['est']
adata.obs['class_est'] = adata.obs.index.map(class_est.est)
sc.pl.umap(adata,color=['class_est'])
adata.obs.loc[adata.obs.class_est==1, 'classLabel'] = 'res'
adata.obs.loc[adata.obs.class_est==0, 'classLabel'] = 'sens'

#%% Make a new .obs variable that divides into time point and class label
TPclass = np.array(['t=0 wks sens', 't=0 wks res', 't=7 wks sens', 't=7 wks res', 't=10 wks sens', 't=10 wks res'])

adata.obs.loc[(adata.obs.timepoint=='t=0 wks') & (adata.obs.classLabel == 'sens'), 'TPclass'] = 't=0 wks sens'
adata.obs.loc[(adata.obs.timepoint=='t=0 wks') & (adata.obs.classLabel == 'res'), 'TPclass'] = 't=0 wks res'
adata.obs.loc[(adata.obs.timepoint=='t=7 wks') & (adata.obs.classLabel == 'sens'), 'TPclass'] = 't=7 wks sens'
adata.obs.loc[(adata.obs.timepoint=='t=7 wks') & (adata.obs.classLabel == 'res'), 'TPclass'] = 't=7 wks res'
adata.obs.loc[(adata.obs.timepoint=='t=10 wks') & (adata.obs.classLabel == 'sens'), 'TPclass'] = 't=10 wks sens'
adata.obs.loc[(adata.obs.timepoint=='t=10 wks') & (adata.obs.classLabel == 'res'), 'TPclass'] = 't=10 wks res'

sc.pl.umap(adata,color=['TPclass'])
#%%



sc.pl.umap(adata,color=['classLabel'])
# Extract the data we need and plot some PCs
adata_pre = adata[adata.obs['timepoint']=='t=0 wks', :]
dfpre = pd.concat([adata_pre.obs['classLabel'],
               pd.DataFrame(adata_pre.raw.X,index=adata_pre.obs.index,
                            columns=adata_pre.var_names),], axis=1) 
lin_list_pre = adata_pre.obs.lineage


#sc.pl.umap(adata_pre,color='classLabel', palette = ['red', 'green']) 
npre = len(dfpre)
print(npre)
ypreb = dfpre.classLabel=='res'
ypre= ypreb*1
phirpre = (sum(ypre))/npre
print(phirpre)
phispre = 1-phirpre
print(phispre)
# Export the pre-treatment class labels
ypre.to_csv("SRlabeled_pre.csv")

filename = "SRlabeled_pre.csv"



#%% Also plot the principal components for each time point 
Xpre = adata_pre.raw.X
PCspre=pca.transform(Xpre)
# Pre-treatment
PCpredf = pd.DataFrame(PCspre)
PCpredf.reset_index(drop=True, inplace=True)
ypre.reset_index(drop=True, inplace=True)
PCpredf['classlabel'] = ypre
xp = np.asarray(PCpredf[0])
yp = np.asarray(PCpredf[1])


PCpredfs = PCpredf[PCpredf['classlabel']==0]
PCpredfr = PCpredf[PCpredf['classlabel']==1]
xpres= np.asarray(PCpredfs[0])
ypres=np.asarray(PCpredfs[1])
xprer= np.asarray(PCpredfr[0])
yprer=np.asarray(PCpredfr[1])

fig = plt.figure(figsize=(10,10))

srs = plt.scatter(xsrs, ysrs, c='g', marker='^', alpha = 1, label = 't=0 hr labeled sensitive')
srr = plt.scatter(xsrr, ysrr, c='r', marker='^', alpha = 1, label = 't=0 hr labeled resistant')
#pre_cells = plt.scatter(xp, yp, c='b', marker='o', alpha = 0.2, label = 't=0 hr remaining')
pres = plt.scatter(xpres, ypres, c='olivedrab', marker='+', alpha = 0.5, label = 't=0 hr est sensitive')
prer = plt.scatter(xprer, yprer, c='pink', marker='+', alpha = 0.5, label = 't=0 hr est resistant')
plt.xlabel('PC1')
plt.ylabel('PC2')

plt.legend(loc=1, prop={'size': 15})


#%% Extract the data we need for second time point
adata_post1 = adata[adata.obs['timepoint']=='t=7 wks', :]
dfpost1= pd.concat([adata_post1.obs['classLabel'],
               pd.DataFrame(adata_post1.raw.X,index=adata_post1.obs.index,
                            columns=adata_post1.var_names),], axis=1) 
sc.pl.umap(adata_post1,color='classLabel', palette = ['red', 'green']) 
npost1 = len(dfpost1)
print(npre)
ypost1b = dfpost1.classLabel=='res'
ypost1= ypost1b*1
phirpost1 = (sum(ypost1))/npost1
print(phirpost1)
phispost1 = 1-phirpost1
print(phispost1)

#%% Also plot the principal components for each time point 
Xpost1 = adata_post1.raw.X
PCspost1=pca.transform(Xpost1)
# Pre-treatment
PCpost1df = pd.DataFrame(PCspost1)
PCpost1df.reset_index(drop=True, inplace=True)
ypost1.reset_index(drop=True, inplace=True)
PCpost1df['classlabel'] = ypost1
xpos1 = np.asarray(PCpost1df[0])
ypos1 = np.asarray(PCpost1df[1])


PCpost1dfs = PCpost1df[PCpost1df['classlabel']==0]
PCpost1dfr = PCpost1df[PCpost1df['classlabel']==1]
xpos1s= np.asarray(PCpost1dfs[0])
ypos1s=np.asarray(PCpost1dfs[1])
xpos1r= np.asarray(PCpost1dfr[0])
ypos1r=np.asarray(PCpost1dfr[1])

fig = plt.figure(figsize=(10,10))

srs = plt.scatter(xsrs, ysrs, c='g', marker='^', alpha = 1, label = 't=0 hr labeled sensitive')
srr = plt.scatter(xsrr, ysrr, c='r', marker='^', alpha = 1, label = 't=0 hr labeled resistant')
#post1_cells = plt.scatter(xpos1, ypos1, c='b', marker='o', alpha = 0.2, label = 't=1176 hr' )
post1s = plt.scatter(xpos1s, ypos1s, c='olivedrab', marker='+', alpha = 0.5, label = 't=1176 hr est sensitive')
post1r = plt.scatter(xpos1r, ypos1r, c='pink', marker='+', alpha = 0.5, label = 't=1176 hr est resistant')
plt.xlabel('PC1')
plt.ylabel('PC2')

plt.legend(loc=1, prop={'size': 15})
#%% Extract the data we need for third time point
adata_post2 = adata[adata.obs['timepoint']=='t=10 wks', :]
dfpost2= pd.concat([adata_post2.obs['classLabel'],
               pd.DataFrame(adata_post2.raw.X,index=adata_post2.obs.index,
                            columns=adata_post2.var_names),], axis=1) 
sc.pl.umap(adata_post2,color='classLabel', palette = ['red', 'green']) 
npost2 = len(dfpost2)
print(npre)
ypost2b = dfpost2.classLabel=='res'
ypost2= ypost2b*1
phirpost2 = (sum(ypost2))/npost2
print(phirpost2)
phispost2 = 1-phirpost2
print(phispost2)

#%% Also plot the principal components for each time point 
Xpost2= adata_post2.raw.X
PCspost2=pca.transform(Xpost2)
# Pre-treatment
PCpost2df = pd.DataFrame(PCspost2)
PCpost2df.reset_index(drop=True, inplace=True)
ypost2.reset_index(drop=True, inplace=True)
PCpost2df['classlabel'] = ypost2
xpos2= np.asarray(PCpost2df[0])
ypos2= np.asarray(PCpost2df[1])


PCpost2dfs = PCpost2df[PCpost2df['classlabel']==0]
PCpost2dfr = PCpost2df[PCpost2df['classlabel']==1]
xpos2s= np.asarray(PCpost2dfs[0])
ypos2s=np.asarray(PCpost2dfs[1])
xpos2r= np.asarray(PCpost2dfr[0])
ypos2r=np.asarray(PCpost2dfr[1])

fig = plt.figure(figsize=(10,10))

srs = plt.scatter(xsrs, ysrs, c='g', marker='^', alpha = 1, label = 't=0 hr labeled sensitive')
srr = plt.scatter(xsrr, ysrr, c='r', marker='^', alpha = 1, label = 't=0 hr labeled resistant')
#post2_cells = plt.scatter(xpos2, ypos2, c='b', marker='o', alpha = 0.2, label = 't=1656 hr' )
post2s = plt.scatter(xpos2s, ypos2s, c='olivedrab', marker='+', alpha = 0.5, label = 't=1176 hr est sensitive')
post2r = plt.scatter(xpos2r, ypos2r, c='pink', marker='+', alpha = 0.5, label = 't=1176 hr est resistant')
plt.xlabel('PC1')
plt.ylabel('PC2')

plt.legend(loc=1, prop={'size': 15})
#%% Plot a few of the key principal component genes in UMAP space
# Pull out a few to plot
sc.pl.umap(adata,color=['UBE2S'])
sc.pl.umap(adata,color=['NEAT1'])
sc.pl.umap(adata,color=['TOP2A'])
sc.pl.umap(adata, color = ['FGF5'])
sc.pl.umap(adata,color = ['FGFR1'])
sc.pl.umap(adata, color = ['IL1RAPL1'])
sc.pl.umap(adata, color = ['IL18'])
sc.pl.umap(adata,color= ['NONO'])

#%% Put each cell's component in the top 4 PCs in the adata object
PCsall = pca.transform(adata.raw.X)
PCalldf= pd.DataFrame(PCsall, index = adata.obs.index)
PCalldf.rename(columns={'0':'PC1'})
#%%
adata.obs['PC1'] = adata.obs.index.map(PCalldf[0])
adata.obs['PC2'] = adata.obs.index.map(PCalldf[1])
adata.obs['PC3'] = adata.obs.index.map(PCalldf[2])
adata.obs['PC4'] = adata.obs.index.map(PCalldf[3])
sc.pl.umap(adata,color=['PC1'])
sc.pl.umap(adata,color=['PC2'])
sc.pl.umap(adata,color=['PC3'])
sc.pl.umap(adata,color=['PC4'])

#%% Export the phi estimates
phi_est= {'phi_t': [phispre, phispost1, phispost2],
        't': [0, 1176, 1656],
        'ncells': [3157,5262,4900]
        }

dfphi= DataFrame(phi_est, columns= ['phi_t', 't', 'ncells'])

print(dfphi)

dfphi.to_csv("phi_t_est_pyth.csv")


filename = "phi_t_est_pyth.csv"
path = "/Users/kj22643/Documents/Documents/Grant_dose_optimization/data"
fullpath = os.path.join(path, filename)
dfphi.to_csv("phi_t_est_pyth.csv")

#%% Output a csv with the gene cell matrix and the class label

dfall= pd.concat([adata.obs['classLabel'],
               pd.DataFrame(adata.raw.X,index=adata.obs.index,
                            columns=adata.var_names),], axis=1) 

nall = len(dfall)
print(nall)

yall = dfall.classLabel=='res'
# Export the pre-treatment class labels
yall.to_csv("SRlabeled_all.csv")
filename = "SRlabeled_all.csv"
# Send this to Didi for iTalk analysis
#%% Find and plot the gene loadings and do differential analysis on these top genes

# identify the top 10 components in PC1
ordered_comp1=PC1.iloc[(-np.abs(components[0,:])).argsort()]
x = -np.abs(components[0,:]);
ind = np.unravel_index(np.argsort(x, axis=None), x.shape)


indtop = ordered_comp1.index[0:50]

ordered_comp2=PC2.iloc[(-np.abs(components[1,:])).argsort()]
x2 = -np.abs(components[1,:]);
ind2 = np.unravel_index(np.argsort(x2, axis=None), x2.shape)


indtop = ordered_comp1.index[0:50]
indtop2 = ordered_comp2.index[0:50]
compdf1 = compdf.index==0
compdf2 = compdf.index==1
comps1 = compdf[compdf1]
comps2 = compdf[compdf2]

#%%

fig = plt.figure(figsize=(5,5))
plt.quiver(np.zeros(1), np.zeros(1),
           comps1['UBE2S'], comps2['UBE2S'], angles='xy', scale_units='xy', scale =2, color = 'g')
plt.quiver(np.zeros(1), np.zeros(1),
           comps1['NEAT1'], comps2['NEAT1'], angles='xy', scale_units='xy', scale =2, color = 'r')
plt.quiver(np.zeros(1), np.zeros(1),
           comps1['TOP2A'], comps2['TOP2A'], angles='xy', scale_units='xy', scale =2, color = 'b')
plt.quiver(np.zeros(1), np.zeros(1),
           comps1['SGO2'], comps2['SGO2'], angles='xy', scale_units='xy', scale =2, color = 'c')
plt.quiver(np.zeros(1), np.zeros(1),
           comps1['FOSL1'], comps2['FOSL1'], angles='xy', scale_units='xy', scale =2, color = 'k')
plt.quiver(np.zeros(1), np.zeros(1),
           comps1['IL11'], comps2['IL11'], angles='xy', scale_units='xy', scale =2, color = 'y')
plt.quiver(np.zeros(1), np.zeros(1),
           comps1['FST'], comps2['FST'], angles='xy', scale_units='xy', scale =2, color = 'm')
plt.quiver(np.zeros(1), np.zeros(1),
           comps1['S100A4'], comps2['S100A4'], angles='xy', scale_units='xy', scale =2, color = 'chartreuse')
plt.xlabel('Loadings PC1')
plt.ylabel(' Loadings PC2')
#%% Add labels based on feature names (here just numbers)
feature_names = np.arange(components.shape[1])
for i,j,z in zip(comps1[indtop]+0.02, comps2[indtop]+0.02,indtop.name):
    plt.text(j, i, z, ha='center', va='center')


#%% Make an anndata object with only the top 100 genes
adataselpre = adata_pre[:, indtop];
adataselpresens = adataselpre.obs['classLabel']=='sens'
adataselpreres = adataselpre.obs['classLabel'] == 'res'

dfpresens = adataselpresens.mean(axis=0)
#%%


sc.pl.matrixplot(adata, indtop, groupby = 'TPclass', swap_axes = True, standard_scale = 'var', figsize = [5, 10])
#%%
sc.pl.matrixplot(adata, indtop, groupby = 'classLabel', swap_axes = True)
sc.pl.matrixplot(adata, indtop2, groupby = 'classLabel', swap_axes = True)

sc.pl.matrixplot(adata, ['UBE2S', 'NEAT1', 'TOP2A', 'MKI67', 'AURKA', 'SGO2', 'CDK1', 'NUSAP1', 'KPNA2'], groupby = 'classLabel', swap_axes = True)
sc.pl.matrixplot(adata, ['UBE2S', 'NEAT1', 'TOP2A', 'MKI67', 'AURKA', 'SGO2', 'CDK1', 'NUSAP1', 'KPNA2'], groupby = 'TPclass', swap_axes = True)

#%%
sc.pl.umap(adata,color=['UBE2S'])
sc.pl.umap(adata,color=['NEAT1'])
sc.pl.umap(adata,color=['TOP2A'])
sc.pl.umap(adata, color = ['FGF5'])
sc.pl.umap(adata,color = ['FGFR1'])
sc.pl.umap(adata, color = ['IL1RAPL1'])
sc.pl.umap(adata, color = ['IL18'])
sc.pl.umap(adata,color= ['NONO'])
